<?php

module_load_include('php', 'vcaching', 'vcaching.class');

/**
 * Implements hook_help()
 */
function vcaching_help($path, $arg) {
    switch ($path) {
        case 'admin/config/system/vcaching':
            //return '<p>' . t('') . '</p>';
        case 'admin/config/system/vcaching/console':
            //return '<p>' . t('') . '</p>';
        case 'admin/config/system/vcaching/stats':
            //return '<p>' . t('') . '</p>';
    }
}

/**
 * Implements hook_init()
 */
function vcaching_init()
{
    $enable = variable_get('vcaching_enable');
    if ($enable) {
        drupal_add_http_header('X-VC-Enabled', 'true');
        if (user_is_logged_in()) {
            drupal_add_http_header('X-VC-Cacheable', 'NO:User is logged in');
            $ttl = 0;
        } else {
            if (drupal_is_front_page()) {
                $ttl = variable_get('vcaching_homepage_ttl');
            } else {
                $ttl = variable_get('vcaching_ttl');
            }
        }
        drupal_add_http_header('X-VC-TTL', $ttl);
        if (variable_get('vcaching_debug')) {
            drupal_add_http_header('X-VC-Debug', 'true');
        }
    } else {
        drupal_add_http_header('X-VC-Enabled', 'false');
    }
}

/**
 * Implements hook_node_presave()
 */
function vcaching_node_presave($node)
{
    if (variable_get('vcaching_enable')) {
        $vcaching = new VCaching('vcaching_');
        if (variable_get('vcaching_clear_cache_node_save')) {
            $vcaching->purgeUrl(base_path() . '?vc-regex');
        } else {
            $vcaching->purgeUrl(base_path() . $node->path['alias']);
        }
        drupal_set_message(t('Varnish cache cleared!') . $vcaching->getNoticeMessage());
    }
}

/**
 * Purge a node from Varnish on delete.
 */
function varnish_all_node_delete($node)
{
    if (variable_get('vcaching_enable')) {
        $vcaching = new VCaching('vcaching_');
        $vcaching->purgeUrl(base_path() . $node->path['alias']);
        drupal_set_message(t('Varnish cache cleared!') . $vcaching->getNoticeMessage());
    }
}

/**
 * Implements hook_menu()
 */
function vcaching_menu()
{
    $items = array();

    $items['admin/config/system/vcaching'] = array(
        'title' => 'Varnish Caching',
        'description' => 'Varnish Caching',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('vcaching_console_form'),
        'access arguments' => array('varnish caching console access'),
        'type' => MENU_NORMAL_ITEM,
        'weight' => 50,
        'file' => 'system.admin.inc',
        'file path' => drupal_get_path('module', 'system')
    );

    $items['admin/config/system/vcaching/settings'] = array(
        'title' => 'Settings',
        'description' => 'Varnish Caching Setings',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('vcaching_settings_form'),
        'access arguments' => array('varnish caching settings access'),
        'type' => MENU_LOCAL_TASK,
        'weight' => 10
    );

    $items['admin/config/system/vcaching/console'] = array(
        'title' => 'Console',
        'description' => 'Varnish Caching Console',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('vcaching_console_form'),
        'access arguments' => array('varnish caching console access'),
        'type' => MENU_DEFAULT_LOCAL_TASK,
        'weight' => 20
    );

    $items['admin/config/system/vcaching/stats'] = array(
        'title' => 'Stats',
        'description' => 'Varnish Caching Stats',
        'page callback' => 'vcaching_stats_form',
        'page arguments' => array(),
        'access callback' => true,
        'access arguments' => array('varnish caching stats access'),
        'type' => MENU_LOCAL_TASK,
        'weight' => 30
    );

    $items['admin/config/system/vcaching/conf'] = array(
        'title' => 'Varnish VCLs',
        'description' => 'Varnish Cache configuration',
        'page callback' => 'drupal_get_form',
        'page arguments' => array('vcaching_conf_form'),
        'access arguments' => array('varnish caching settings access'),
        'type' => MENU_LOCAL_TASK,
        'weight' => 40
    );

    $items['vcaching_purge_all_cache'] = array(
        'title' => 'Purge Varnish cache',
        'description' => 'Clear all cache',
        'page callback' => 'vcaching_purge_all_cache_callback',
        'access arguments' => array('varnish caching purge all'),
        'menu_name' => 'shortcut-set-1',
        'type' => MENU_NORMAL_ITEM,
        'weight' => 10
    );

    return $items;
}

/**
 * Implements hook_permission()
 */
function vcaching_permission() {
    return array(
        'varnish caching purge all' => array(
            'title' => t('Purge all Varnish cache from shortcut'),
        ),
        'varnish caching settings access' => array(
            'title' => t('Change settings'),
        ),
        'varnish caching console access' => array(
            'title' => t('Use the console'),
        ),
        'varnish caching stats access' => array(
            'title' => t('View stats'),
        )
    );
}

/**
 * Settings form
 */
function vcaching_settings_form()
{
    $form = array();
    $form['general'] = array(
        '#type' => 'fieldset',
        '#title' => t('Settings'),
        '#weight' => 5,
        '#collapsible' => false,
        '#collapsed' => false
    );
    $form['general']['vcaching_enable'] = array(
        '#type' => 'checkbox',
        '#title' => t('Enable'),
        '#description' => t('Enable Varnish Caching'),
        '#default_value' => variable_get('vcaching_enable', '0'),
        '#title_display' => 'before'
    );
    $form['general']['vcaching_homepage_ttl'] = array(
        '#type' => 'textfield',
        '#title' => t('Homepage cache TTL'),
        '#description' => t('Time to live in seconds in Varnish cache for homepage'),
        '#default_value' => variable_get('vcaching_homepage_ttl', '600'),
        '#size' => 10,
        '#maxlength' => 10,
        '#required' => TRUE,
    );
    $form['general']['vcaching_ttl'] = array(
        '#type' => 'textfield',
        '#title' => t('Cache TTL'),
        '#description' => t('Time to live in seconds in Varnish cache'),
        '#default_value' => variable_get('vcaching_ttl', '600'),
        '#size' => 10,
        '#maxlength' => 10,
        '#required' => TRUE,
    );
    $form['general']['vcaching_ips'] = array(
        '#type' => 'textfield',
        '#title' => t('IPs'),
        '#description' => t('Comma separated ip/ip:port. Example : 192.168.0.2,192.168.0.3:8080'),
        '#default_value' => variable_get('vcaching_ips', '127.0.0.1'),
        '#size' => 60,
        '#maxlength' => 500,
        '#required' => TRUE,
    );
    $form['general']['vcaching_dynamic_host'] = array(
        '#type' => 'checkbox',
        '#title' => t('Dynamic host'),
        '#description' => t('Uses the $_SERVER[\'HTTP_HOST\'] as hash for Varnish. This means the purge cache action will work on the domain you\'re on. Use this option if you use only one domain.'),
        '#default_value' => variable_get('vcaching_dynamic_host', 0)
    );
    if (variable_get('vcaching_dynamic_host') == 0) {
        $form['general']['vcaching_hosts'] = array(
            '#type' => 'textfield',
            '#title' => t('Hosts'),
            '#description' => t('Comma separated hostnames. Varnish uses the hostname to create the cache hash. For each IP, you must set a hostname. Use this option if you use multiple domains.'),
            '#default_value' => variable_get('vcaching_hosts', 'example.com'),
            '#size' => 60,
            '#maxlength' => 500,
            '#required' => TRUE,
        );
    }
    $form['general']['vcaching_purge_key'] = array(
        '#type' => 'textfield',
        '#title' => t('Purge key'),
        '#suffix' => '<div class="description">' . t('Key used to purge Varnish cache. It is sent to Varnish as X-VC-Purge-Key header. Use a SHA-256 hash. If you can\'t use ACL\'s, use this option. You can set the `purge key` in lib/purge.vcl.<br />Search the default value ff93c3cb929cee86901c7eefc8088e9511c005492c6502a930360c02221cf8f4 to find where to replace it.') . '</div>',
        '#field_suffix' => '<span class="vcaching-reload" onclick="generateHash(64, 0, \'edit-vcaching-purge-key\'); return false;" title="' . t('Generate') . '"></span>',
        '#default_value' => variable_get('vcaching_purge_key', 'ff93c3cb929cee86901c7eefc8088e9511c005492c6502a930360c02221cf8f4'),
        '#size' => 100,
        '#maxlength' => 64,
        '#required' => TRUE,
    );
    $form['general']['vcaching_cookie'] = array(
        '#type' => 'textfield',
        '#title' => t('Logged in cookie'),
        '#suffix' => '<div class="description">' . t('This module sets a special cookie to tell Varnish that the user is logged in. This should be a random 10 chars string [0-9a-z]. You can set the `logged in cookie` in default.vcl.<br />Search the default value <i>c005492c65</i> to find where to replace it.') . '</div>',
        '#field_suffix' => '<span class="vcaching-reload" onclick="generateHash(10, 0, \'edit-vcaching-cookie\'); return false;" title="' . t('Generate') . '"></span>',
        '#default_value' => variable_get('vcaching_cookie', 'c005492c65'),
        '#size' => 10,
        '#maxlength' => 10,
        '#required' => TRUE,
    );
    $form['general']['vcaching_stats_json_file'] = array(
        '#type' => 'textfield',
        '#title' => t('Statistics JSONs'),
        '#suffix' => '<div class="description">' . t('Comma separated relative URLs. One for each IP. <a href="vcaching/stats?info=1">Click here</a> for more info on how to set this up.') . '</div>',
        '#default_value' => variable_get('vcaching_stats_json_file', '/varnishstats.json'),
        '#size' => 100,
        '#maxlength' => 128
    );
    $form['general']['vcaching_clear_cache_node_save'] = array(
        '#type' => 'checkbox',
        '#title' => t('Clear all cache on node save'),
        '#description' => t('If this option is on, each node save will trigger a full cache purge (/.*). If it\'s off, only the pages associated with the node will be purged.'),
        '#default_value' => variable_get('vcaching_clear_cache_node_save', 0),
        '#title_display' => 'before'
    );
    $form['general']['vcaching_debug'] = array(
        '#type' => 'checkbox',
        '#title' => t('Enable debug'),
        '#description' => t('Send all debugging headers to the client. Also shows complete response from Varnish on purge all.'),
        '#default_value' => variable_get('vcaching_debug', 0),
        '#title_display' => 'before'
    );

    drupal_add_js('
        function generateHash(length, bits, id) {
            bits = bits || 36;
            var outStr = "", newStr;
            while (outStr.length < length)
            {
                newStr = Math.random().toString(bits).slice(2);
                outStr += newStr.slice(0, Math.min(newStr.length, (length - outStr.length)));
            }
            jQuery("#" + id).val(outStr);
        };', 'inline');

    return system_settings_form($form);
}

/**
 * Console form
 */
function vcaching_console_form()
{
    $form = array();
    $form['action'] = array(
        '#type' => 'fieldset',
        '#title' => t('Console'),
        '#weight' => 5,
        '#collapsible' => false,
        '#collapsed' => false
    );
    $form['action']['vcaching_console_url'] = array(
        '#type' => 'textfield',
        '#title' => t('Relative URL'),
        '#description' => t('Relative URL to purge. Example : /uploads/.*'),
        '#default_value' => variable_get('vcaching_console_url', '/.*'),
        '#size' => 60,
        '#maxlength' => 500,
        '#required' => TRUE,
    );
    $form['action']['submit'] = array('#type' => 'submit', '#value' => t('Purge cache'), '#submit' => array('vcaching_console_form_submit'));
    return system_settings_form($form);
}

/**
 * Console form submit
 */
function vcaching_console_form_submit($form, &$form_state)
{
    if (variable_get('vcaching_enable')) {
        $vcaching = new VCaching('vcaching_');
        $vcaching->purgeUrl($_POST['vcaching_console_url']);
        drupal_set_message(t('Varnish cache cleared!') . $vcaching->getNoticeMessage());
    }
}

/**
 * Stats form
 */
function vcaching_stats_form()
{
    if (variable_get('vcaching_enable')) {
        $vcaching = new VCaching('vcaching_');
        return $vcaching->stats();
    }
}

/**
 * Conf form
 */
function vcaching_conf_form()
{
    $form = array();
    $form['general'] = array(
        '#type' => 'fieldset',
        '#title' => t('Varnish Cache configuration'),
        '#weight' => 5,
        '#collapsible' => false,
        '#collapsed' => false
    );
    $form['general']['vcaching_conf_backends'] = array(
        '#type' => 'textfield',
        '#title' => t('Backends'),
        '#description' => t('Comma separated ip/ip:port. Example : 192.168.0.2,192.168.0.3:8080'),
        '#default_value' => variable_get('vcaching_conf_backends'),
        '#size' => 60,
        '#required' => true
    );
    $form['general']['vcaching_conf_acls'] = array(
        '#type' => 'textfield',
        '#title' => t('ACLs'),
        '#description' => t('Comma separated ip/ip range. Example : 192.168.0.2,192.168.1.1/24'),
        '#default_value' => variable_get('vcaching_conf_acls'),
        '#size' => 60,
        '#required' => true
    );
    $form['general']['submit'] = array('#type' => 'submit', '#value' => t('Save configuration'));
    $form['action'] = array(
        '#type' => 'fieldset',
        '#title' => t('Get configuration files'),
        '#weight' => 5,
        '#collapsible' => false,
        '#collapsed' => false
    );
    $form['action']['vcaching_conf_version'] = array(
        '#type' => 'select',
        '#title' => t('Version'),
        '#description' => t('Varnish Cache version'),
        '#options' => array(3 => 3,4 => 4),
        '#default_value' => 3,
        '#required' => true
    );
    $form['action']['submit'] = array('#type' => 'submit', '#value' => t('Download'), '#submit' => array('vcaching_conf_form_submit'));
    return system_settings_form($form);
}

/**
 * Implements form_alter()
 */
function vcaching_form_alter(&$form, &$form_state, $form_id)
{
    if ($form_id == 'vcaching_conf_form') {
        unset($form['actions']['submit']);
    }
}

/**
 * Conf form submit
 */
function vcaching_conf_form_submit($form, &$form_state)
{
    $version = in_array($_POST['vcaching_conf_version'], array(3,4)) ? $_POST['vcaching_conf_version'] : 3;
    if (variable_get('vcaching_enable')) {
        $vcaching = new VCaching('vcaching_');
        $vcaching->downloadConf($version);
    }
}

/**
 * Shortcut callback
 */
function vcaching_purge_all_cache_callback()
{
    if (variable_get('vcaching_enable')) {
        $vcaching = new VCaching('vcaching_');
        $vcaching->purgeUrl(base_path() . '?vc-regex');
        drupal_set_message(t('Varnish cache cleared!') . $vcaching->getNoticeMessage());
    }
    drupal_goto($_SERVER['HTTP_REFERER']);
}

/**
 * Implements hook_user_login()
 */
function vcaching_user_login(&$edit, $account)
{
    user_cookie_save(array(variable_get('vcaching_cookie') => 1));
}

/**
 * Implements hook_user_logout()
 */
function vcaching_user_logout($account)
{
    user_cookie_delete(variable_get('vcaching_cookie'));
}